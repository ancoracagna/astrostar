import random
# –¥–æ—Å—Ç–∞–µ–º refer_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
import re
import string

from app.db.requests import (get_ref_market, get_ref_price, get_today_refs, get_week_refs, get_month_refs,
                             check_ref_code, get_ref_unique, get_all_ref_starts, check_user_subs)
from app.db.requests_op import get_op_data, check_bot_channel_admin, get_actual_op_full, \
    switch_status_op_by_username

from app.filters.main_filter import ADMINS as admins

def get_refer_id(command_args):
    try:
        return str(command_args)
    except (TypeError, ValueError):
        return None

def gen_res():
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Å–ø–µ–∫—Ç–∞
    percent = random.randint(0, 100)
    economics_balance = random.randint(0, 100)
    workflow_balance = random.randint(0, 100)
    health_balance = random.randint(0, 100)
    children_count = random.randint(0, 5)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –∏ –∞—Å–ø–µ–∫—Ç–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
    keys_to_future = ['–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ', '–ú–æ—Ç–∏–≤–∞—Ü–∏—è', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–°—á–∞—Å—Ç–ª–∏–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã', '–£—Å–ø–µ—Ö', '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                      '–°–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è', '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', '–ñ–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞', '–≠–Ω–µ—Ä–≥–∏—è', '–õ—é–±–æ–≤—å –∫ –∂–∏–∑–Ω–∏', '–†–∞–¥–æ—Å—Ç—å',
                      '–ì–∞—Ä–º–æ–Ω–∏—è', '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä', '–ü—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏–µ', '–°–º—ã—Å–ª –∂–∏–∑–Ω–∏', '–í–µ—Ä–∞ –≤ —Å–µ–±—è', '–î—Ä—É–∂–±–∞',
                      '–°–µ–º–µ–π–Ω–æ–µ —Å—á–∞—Å—Ç—å–µ', '–ó–¥–æ—Ä–æ–≤—å–µ', '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—ä–µ–º', '–°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –ª—É—á—à–µ–º—É', '–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ',
                      '–°–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ', '–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ', '–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –ª—é–¥–∏', '–ö—Ä–∞—Å–æ—Ç–∞ –≤–æ–∫—Ä—É–≥', '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å',
                      '–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è', '–ú–µ—á—Ç—ã –∏ —Ü–µ–ª–∏', '–î–æ–±—Ä–æ—Ç–∞', '–í–∑–∞–∏–º–æ–ø–æ–º–æ—â—å', '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', '–°–≤–æ–±–æ–¥–∞',
                      '–°–≤–µ—Ç–ª—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è', '–¢–µ–ø–ª–æ—Ç–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π', '–†–æ–º–∞–Ω—Ç–∏–∫–∞', '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', '–£–¥–∏–≤–ª–µ–Ω–∏–µ',
                      '–ß—É–≤—Å—Ç–≤–æ –≥–æ—Ä–¥–æ—Å—Ç–∏', '–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å', '–≠–º–ø–∞—Ç–∏—è', '–°–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ', '–¢–µ—Ä–ø–∏–º–æ—Å—Ç—å', '–°–º–µ–ª–æ—Å—Ç—å',
                      '–ù–æ–≤–∞—Ç–æ—Ä—Å—Ç–≤–æ', '–£–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ', '–í–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ', '–ß—É–≤—Å—Ç–≤–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è', '–ñ–µ–ª–∞–Ω–∏–µ —É—á–∏—Ç—å—Å—è',
                      '–°–æ–∑–∏–¥–∞–Ω–∏–µ', '–ü—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–¶–µ–Ω–Ω–æ—Å—Ç—å –º–æ–º–µ–Ω—Ç–∞', '–ë–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ', '–ñ–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω–æ—Å—Ç—å',
                      '–î—É—à–µ–≤–Ω–æ–µ —Ç–µ–ø–ª–æ', '–ò–Ω—Ç—É–∏—Ü–∏—è', '–°–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞', '–£–º–µ–Ω–∏–µ –ø—Ä–æ—â–∞—Ç—å', '–ß–µ—Å—Ç–Ω–æ—Å—Ç—å',
                      '–†–∞–¥–æ—Å—Ç—å –æ—Ç —Ä–∞–±–æ—Ç—ã', '–¢–∞–ª–∞–Ω—Ç', '–ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å', '–ü–æ–∑–Ω–∞–Ω–∏–µ –º–∏—Ä–∞', '–¶–µ–Ω–Ω–æ—Å—Ç—å —Å–µ–º—å–∏', '–≠—Å—Ç–µ—Ç–∏–∫–∞',
                      '–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å', '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']

    need_to_work = ['–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –∏ —É–º–µ–Ω–∏–µ —Å–ª—ã—à–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞', '–î–æ–≤–µ—Ä–∏–µ', '–£–≤–∞–∂–µ–Ω–∏–µ', '–≠–º–ø–∞—Ç–∏—è', '–¢–µ—Ä–ø–∏–º–æ—Å—Ç—å',
                    '–í–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ', '–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ —Ü–µ–ª–∏', '–°–ª—É—à–∞–Ω–∏–µ', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', '–ß–µ—Å—Ç–Ω–æ—Å—Ç—å', '–ü—Ä–æ—â–µ–Ω–∏–µ',
                    '–£–º–µ–Ω–∏–µ –∏–¥—Ç–∏ –Ω–∞ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å', '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å', '–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
                    '–ë–∞–ª–∞–Ω—Å –≤—Ä–µ–º–µ–Ω–∏ –≤–º–µ—Å—Ç–µ –∏ –ø–æ—Ä–æ–∑–Ω—å', '–í–∑–∞–∏–º–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã', '–°–æ–≤–º–µ—Å—Ç–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π',
                    '–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º', '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤', '–£–≤–∞–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞',
                    '–†–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ç–∏–º–Ω–æ—Å—Ç–∏', '–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –∏ –ø–æ—Ö–≤–∞–ª–∞', '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞–º–∏', '–í–∑–∞–∏–º–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è',
                    '–ü–æ–Ω–∏–º–∞–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏–π –¥—Ä—É–≥ –¥—Ä—É–≥–∞', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–æ–º–∞–Ω—Ç–∏–∫–∏', '–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ',
                    '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏', '–î—É—Ö–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ',
                    '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —Ç—Ä—É–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞'
        , '–°–æ–≤–º–µ—Å—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ —Ä–æ—Å—Ç', '–ó–∞–±–æ—Ç–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ', '–í–∑–∞–∏–º–Ω–æ–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ', '–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π',
                    '–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–∞–∑–ª–∏—á–∏–π', '–í–∑–∞–∏–º–Ω–æ–µ —É–≤–∞–∂–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü', '–†–∞–∑–≤–∏—Ç–∏–µ –æ–±—â–µ–π –∫—É–ª—å—Ç—É—Ä—ã',
                    '–£–≤–∞–∂–µ–Ω–∏–µ –∫ –¥—Ä—É–∑—å—è–º –∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞', '–£–º–µ–Ω–∏–µ –¥–µ–ª–∏—Ç—å—Å—è —Ä–∞–¥–æ—Å—Ç—å—é',
                    '–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞', '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ–º —Å—Ç—Ä–µ—Å—Å–∞', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–∞—Ä–º–æ–Ω–∏–∏',
                    '–ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–æ–ª–µ–π –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö', '–°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª–∏—á–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π',
                    '–ü—Ä–æ—è–≤–ª–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏', '–£–≤–∞–∂–µ–Ω–∏–µ –∫ –ø—Ä–æ—à–ª–æ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞', '–£–º–µ–Ω–∏–µ —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –º–µ–ª–æ—á–∞–º',
                    '–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ —É–≤–ª–µ—á–µ–Ω–∏—è', '–í—Ä–µ–º—è –¥–ª—è —Å–µ–±—è', '–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö',
                    '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã', '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∑–∞–±–æ—Ç–∞',
                    '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–∏ –¥–µ—Ç–µ–π', '–°–µ–∫—Å—É–∞–ª—å–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è',
                    '–ì–∏–±–∫–æ—Å—Ç—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö', '–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π', '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏–π',
                    '–ü—Ä–∏–Ω—è—Ç–∏–µ —Å–ª–∞–±–æ—Å—Ç–µ–π –¥—Ä—É–≥ –¥—Ä—É–≥–∞']

    # –†–∞–Ω–¥–æ–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π
    economics_balance = random.randint(0, 100)
    workflow_balance = random.randint(0, 100)
    health_balance = random.randint(0, 100)
    children_count = random.randint(0, 5)

    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –¥–ª—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
    keys_to_future_choices = random.sample(keys_to_future, k=random.randint(2, 3))
    need_to_work_choices = random.sample(need_to_work, k=random.randint(2, 3))

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = (
        f"üîÆ *–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π* üîÆ\n\n"
        f"üë©‚Äç‚ù§Ô∏è‚Äçüë® *–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å*: {percent}%\n"
        f"üåü *–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å*: {economics_balance}%\n"
        f"üìä *–ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏*: {workflow_balance}%\n"
        f"‚ù§Ô∏è *–ó–¥–æ—Ä–æ–≤—å–µ*: {health_balance}%\n"
        f"üë∂ *–í–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π*: {children_count}\n\n"
        "üå† *–û—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –¥–ª—è –±—É–¥—É—â–µ–≥–æ*:\n"
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –¥–ª—è –±—É–¥—É—â–µ–≥–æ
    for key in keys_to_future_choices:
        message += f"üî∏ {key}\n"

    message += "\nüîß *–ß—Ç–æ –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å*:\n"

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ –Ω—É–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å
    for work in need_to_work_choices:
        message += f"üîπ {work}\n"

    return message


def gen_unique():
    text = [random.choice(string.ascii_lowercase + string.digits if i != 5 else string.ascii_uppercase) for i in
            range(20)]
    print(f'genned: {text}')
    text = ''.join(text)
    return text


def escape_markdown_v2(text):
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

async def get_ref_info(ref_name):
    if await check_ref_code(ref_name)!= 0:
        refs_all = await get_ref_market(ref_name) # –ú–æ–∂–Ω–æ –≤—Å–µ —ç—Ç–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ 1 —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ
        all_refs_starts = await get_all_ref_starts(ref_name)
        refs_unique = await get_ref_unique(ref_name)
        code_price = await get_ref_price(ref_name)
        refs_today = await get_today_refs(ref_name)
        refs_week = await get_week_refs(ref_name)
        refs_month = await get_month_refs(ref_name)
        print(f'refs_all: {refs_all} code_price: {code_price}')
        if int(code_price) !=0:
            if all_refs_starts!=0:
                ref_price = int(code_price) / int(all_refs_starts)
            else:
                ref_price = '–ù–µ –∏–∑–º–µ—Ä–∏–º–æ'
            if refs_unique!=0:
                ref_unique_price = int(code_price) / int(refs_unique)
            else:
                ref_unique_price = '–ù–µ –∏–∑–º–µ—Ä–∏–º–æ'
        else:
            ref_price = '0'
            ref_unique_price = '0'
        link = 'https://t.me/astrostar_bot?start='+str(ref_name)
        link = escape_markdown_v2(link)
        ref_price = escape_markdown_v2(str(ref_price))
        ref_unique_price = escape_markdown_v2(str(ref_unique_price))
        code_price = escape_markdown_v2(code_price)
        answer = (f'*–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏* {ref_name}\n\n'
                             f'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*: \n\n'
                             f'‚Ä¢ –í—Å–µ–≥–æ –ø–µ—Ä–µ—à–ª–∏ \- {all_refs_starts}\n'
                             f'‚Ä¢ –ò–∑ –Ω–∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã \- {refs_unique}\n'
                             f'‚Ä¢ –ò–∑ –Ω–∏—Ö –∂–∏–≤—ã \- {refs_all}\n'
                             f'‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –û–ü \- 0\n\n'
                             f'‚åõÔ∏è *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏*\n\n'
                             f'‚Ä¢ –°–µ–≥–æ–¥–Ω—è \- {refs_today}\n'
                             f'‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π \- {refs_week}\n'
                             f'‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π \- {refs_month}\n\n'
                             f'*–¶–µ–Ω—ã*\n\n'
                             f'‚Ä¢ –¶–µ–Ω–∞ —Å—Å—ã–ª–∫–∏ \- {code_price}\n'
                             f'‚Ä¢ –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ \- {ref_price}\n'
                             f'‚Ä¢ –¶–µ–Ω–∞ –∑–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ \- {ref_unique_price}\n'
                             f'‚Ä¢ –¶–µ–Ω–∞ –∑–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ \(–û–ü\) \- 0\n\n'
                             f'–°—Å—ã–ª–∫–∞: {link}')
        #answer = escape_markdown_v2(answer)
        return answer
    else:
        answer = f'–°—Å—ã–ª–∫–∏ {ref_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –µ–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        return answer

async def get_op_info(op_name):
    name = op_name
    data = await get_op_data(str(op_name))
    print(data)
    print(f'link: {data.op_link}')
    count = 0
    answer = (f'–ù–∞–∑–≤–∞–Ω–∏–µ –û–ü –∫–Ω–æ–ø–∫–∏: {name}\n–ù–∏–∫: {data.op_username}\n–°—Å—ã–ª–∫–∞: {data.op_link}\n–ö–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫: {data.op_count}\n–°—Ç–∞—Ç—É—Å: {data.op_status}')
    answer = escape_markdown_v2(answer)
    return answer


async def check_admin_channels(bot):
    bad_lst = await check_bot_channel_admin(bot)
    if not bad_lst:
        answer = '–ë–æ—Ç –∞–¥–º–∏–Ω –≤–æ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö –¥–ª—è –û–ü. –ë–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ'
    else:
        answer = f'–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω: {bad_lst}' # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∏—Ö
        for bad in bad_lst:
            #bad = bad.replace('@', 't.me/')
            await switch_status_op_by_username(bad)
        answer += '\n–û—Ç–∫–ª—é—á–∏–ª–∏ –æ—Ç —Ä–∞–±–æ—Ç—ã —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–∞—Ä—É—à–∞—é—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞'
        for admin in admins:
            await bot.send_message(admin,f'–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω: {bad_lst}\n–û—Ç–∫–ª—é—á–∏–ª–∏ –æ—Ç —Ä–∞–±–æ—Ç—ã —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–∞—Ä—É—à–∞—é—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞')

async def check_user_subs_util(user, bot):
    actual_ops = await get_actual_op_full()

    need_to_sub = []
    for op in actual_ops:
        #link = str(op.op_link).replace('t.me/', '@')
        link = str(op.op_username)
        print(f'link: {link}')
        channel = await check_user_subs(user, bot, link)
        if channel:
            need_to_sub.append(channel)

    return need_to_sub