import re

from aiogram import Router, F, Bot
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State

from app.builder import ref_code_key, ref_keys_builder, op_builder, op_keys_builder, op_switch_kb, settingbuilder, \
    have_to_sub
from app.db.requests import get_all_users, get_today_users, get_all_users_lst, get_month_users, get_event_count, \
    get_ref_market, create_ref_code, get_ref_lst, get_user_opstatus
from app.db.requests_op import create_op, get_op_lst, switch_status_op, delete_op_req, \
    check_bot_channel_admin, switch_status_op_by_username, switch_settings_op
from app.db.requests_ref import switch_settings_ref, get_ops_list, add_user_op_toref
from app.filters.main_filter import AdminProtect
from app.keyboards import adminpanel, apanelback, apanelsendall, marketpanel, templatesend, op_create_kb, mpanel, \
    op_panel
from app.states import SendAllPic, SendAllText, Marketing, New_Ref, BroadcastState, OP_State
from app.utils.utils import get_ref_info, get_op_info, check_admin_channels, check_user_subs_util

admin_router = Router()


@admin_router.message(AdminProtect(), Command('apanel'))
async def apanel(message: Message, command: Command):
    await message.answer('–í—ã –∑–∞—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=adminpanel)


@admin_router.message(AdminProtect(), Command('stat'))
async def stat(message: Message, command: Command):
    await message.answer('–í—ã –∑–∞—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')


@admin_router.message(AdminProtect(), Command('sendall'))
async def sendall(message: Message, command: Command):
    await message.answer('–í—ã –∑–∞—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')


@admin_router.callback_query(AdminProtect(), F.data == 'marketing')
async def marketing(callback: CallbackQuery):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª –º–∞—Ä–∫–µ—Ç–∏–Ω–≥')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup = mpanel)

@admin_router.callback_query(AdminProtect(), F.data == 'refs_menu')
async def mpaneld(callback: CallbackQuery):
    await callback.answer('–£—Å–ø–µ—à–Ω–æ')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=marketpanel)

@admin_router.callback_query(AdminProtect(), F.data == 'op_menu')
async def oppanel(callback: CallbackQuery):
    await callback.answer('–£—Å–ø–µ—à–Ω–æ')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=op_panel)

@admin_router.callback_query(AdminProtect(), F.data == 'create_ref_code')
async def create_refcode(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏')
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –ø—Ä–∏–º–µ—Ä "AGARIO"')
    await state.set_state(New_Ref.ref_name)
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –±–¥ + —Ä–∞–∑–±–∏–≤–∞—Ç—å –ø–æ 10 –∫–æ–¥–æ–≤, —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∫ –≤ backet

@admin_router.message(AdminProtect(), New_Ref.ref_name)
async def marketing_getinfo(message: Message, state: FSMContext):
    await state.update_data(ref_name=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å:')
    await state.set_state(New_Ref.price)


@admin_router.message(AdminProtect(), New_Ref.price)
async def setrefprice(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    ref_code = await state.get_data()
    ref_name = ref_code["ref_name"]
    ref_price = ref_code["price"]
    if await create_ref_code(message.from_user.id, ref_name, ref_price)!=0:
        await message.answer(f'–°—Å—ã–ª–∫–∞ {ref_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!', reply_markup=ref_code_key(ref_name))
        await state.clear()
    else:
        await message.answer(f'–°—Å—ã–ª–∫–∞ {ref_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        await state.clear()

@admin_router.callback_query(AdminProtect(), F.data.startswith('refcode_'))
async def inline_refcode(callback: CallbackQuery):
    ref_code = callback.data.split('_')[1]
    answer = await get_ref_info(ref_code)
    await callback.message.answer(answer, parse_mode=ParseMode.MARKDOWN_V2)
    await callback.answer(f'–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Å—ã–ª–∫–µ: {ref_code}')


@admin_router.callback_query(AdminProtect(), F.data.startswith('ref_code_lst'))
async def get_ref_codes(callback: CallbackQuery):
    page = 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await send_ref_list(callback, page)

@admin_router.callback_query(AdminProtect(), F.data.startswith('back_reflist_'))
async def go_back(callback: CallbackQuery):
    current_page = int(callback.data.split('_')[-1])
    if current_page > 1:
        await send_ref_list(callback, current_page - 1)
    else:
        await callback.answer('–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', show_alert=True)

@admin_router.callback_query(AdminProtect(), F.data.startswith('forward_reflist_'))
async def go_forward(callback: CallbackQuery):
    current_page = int(callback.data.split('_')[-1])
    await send_ref_list(callback, current_page + 1)

async def send_ref_list(callback: CallbackQuery, page: int):
    ref_lst = await get_ref_lst(page)
    if ref_lst:
        await callback.message.edit_text(
            '–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø–æ –¥–∞—Ç–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é',
            reply_markup=ref_keys_builder(ref_lst, page)
        )
    else:
        await callback.answer('–ë–æ–ª—å—à–µ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤', show_alert=True)

@admin_router.callback_query(AdminProtect(), F.data == 'manual_ref_search')
async def manual_search(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥')
    await state.set_state(Marketing.ref_name)

@admin_router.message(AdminProtect(), Marketing.ref_name)
async def marketing_getinfo(message: Message, state: FSMContext):
    await state.update_data(ref_name=message.text)
    ref_code = await state.get_data()
    answer = await get_ref_info(ref_code["ref_name"])
    await message.answer(answer, parse_mode=ParseMode.MARKDOWN_V2)


@admin_router.callback_query(AdminProtect(), F.data == 'stat')
async def get_stat(callback: CallbackQuery):
    await callback.answer('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    month_users = await get_month_users()
    print(month_users)
    all_users = await get_all_users()
    today_users = await get_today_users()
    today_horoscope = await get_event_count('–ì–æ—Ä–æ—Å–∫–æ–ø')
    today_comp = await get_event_count('–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å')
    await callback.message.edit_text(
        f'*\=\=\=\=\=\=\= –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ \=\=\=\=\=\=\=*\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {all_users}\n'
        f'üÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {today_users}\n'
        f'üóì –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {month_users}\n'
        f'‚ù§Ô∏è –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {today_comp}\n'
        f'üîÆ –ó–∞–ø—Ä–æ—Å–æ–≤ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {today_horoscope}', parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=apanelback)


@admin_router.callback_query(AdminProtect(), F.data == 'sendall')
async def send_all(callback: CallbackQuery):
    await callback.answer('–†–∞—Å—Å—ã–ª–∫–∞')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=apanelsendall)
    all_users = await get_all_users_lst()
    print(all_users)


@admin_router.callback_query(AdminProtect(), F.data == 'sendallpic')
async def send_all(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–†–∞—Å—Å—ã–ª–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π')
    await state.set_state(SendAllPic.img)
    await callback.message.edit_text('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É')


@admin_router.callback_query(AdminProtect(), F.data == 'sendalltxt')
async def send_all(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–æ–º')
    await state.set_state(SendAllText.text)
    await callback.message.edit_text('–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')


@admin_router.message(AdminProtect(), SendAllText.text)
async def sendtxt(message: Message, state: FSMContext, bot: Bot):
    all_users = await get_all_users_lst()
    await state.update_data(text=message.text)
    data = await state.get_data()
    count = 0
    for user in all_users:
        try:
            await bot.send_message(user, text=data['text'])
            count += 1
        except:
            print('error')
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ö–≤–∞—Ç–∏–ª–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    await state.clear()


@admin_router.message(AdminProtect(), SendAllPic.img)
async def addimgtosend(message: Message, state: FSMContext):
    await state.update_data(img=message.photo[-1].file_id)
    await state.set_state(SendAllPic.text)
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')  # –ù—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è –≤–∏–¥–µ–ª –ø—Ä–∏–º–µ—Ä


@admin_router.message(AdminProtect(), SendAllPic.text)
async def sendall(message: Message, state: FSMContext, bot: Bot):
    all_users = await get_all_users_lst()
    await state.update_data(text=message.text)
    data = await state.get_data()
    count = 0
    for user in all_users:
        try:
            await bot.send_photo(user, photo=data['img'], caption=data['text'])
            count += 1
        except:
            print('error')
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ö–≤–∞—Ç–∏–ª–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    await state.clear()


@admin_router.callback_query(AdminProtect(), F.data == 'back')
async def back_to_panel(callback: CallbackQuery):
    await callback.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å')
    await callback.message.edit_text('–í—ã –∑–∞—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=adminpanel)

@admin_router.callback_query(AdminProtect(), F.data == 'sendtemplate')
async def testmsg(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–ü–µ—Ä–µ—à–ª–∏—Ç–µ —à–∞–±–ª–æ–Ω')
    await callback.message.answer('–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
    await state.set_state(BroadcastState.waiting_for_message)

@admin_router.message(AdminProtect(), BroadcastState.waiting_for_message)
async def sendformat(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(
        message_id=message.message_id,
        chat_id=message.chat.id,
        content_type=message.content_type,
        text=message.html_text if message.html_text else None,
        photo=message.photo[-1].file_id if message.photo else None,
        document=message.document.file_id if message.document else None,
        reply_markup=message.reply_markup
    )
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.content_type == 'text':
        await bot.send_message(chat_id=message.chat.id, text=message.html_text, parse_mode=ParseMode.HTML, reply_markup=message.reply_markup)
    elif message.content_type == 'photo':
        await bot.send_photo(chat_id=message.chat.id, photo=message.photo[-1].file_id, caption=message.html_text, parse_mode=ParseMode.HTML, reply_markup=message.reply_markup)
    elif message.content_type == 'document':
        await bot.send_document(chat_id=message.chat.id, document=message.document.file_id, caption=message.html_text, parse_mode=ParseMode.HTML, reply_markup=message.reply_markup)

    await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º?', reply_markup=templatesend)
    await state.set_state(BroadcastState.confirm_message)

@admin_router.callback_query(AdminProtect(), BroadcastState.confirm_message, F.data == 'confirm_send')
async def sendtemplate(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    all_users = await get_all_users_lst()
    count = 0
    for user_id in all_users:
        try:
            if data['content_type'] == 'text':
                await bot.send_message(chat_id=user_id, text=data['text'], parse_mode=ParseMode.HTML, reply_markup=data['reply_markup'])
            elif data['content_type'] == 'photo':
                await bot.send_photo(chat_id=user_id, photo=data['photo'], caption=data['text'], parse_mode=ParseMode.HTML, reply_markup=data['reply_markup'])
            elif data['content_type'] == 'document':
                await bot.send_document(chat_id=user_id, document=data['document'], caption=data['text'], parse_mode=ParseMode.HTML, reply_markup=data['reply_markup'])
            count += 1
        except Exception as e:
            print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}')

    await callback.message.edit_text(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.')
    await state.clear()

@admin_router.callback_query(AdminProtect(), F.data == 'canceltemplate')
async def canceltemplate(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–û—Ç–º–µ–Ω–∞')
    await callback.message.edit_text('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É', reply_markup=adminpanel)
    await state.clear()

@admin_router.callback_query(AdminProtect(), F.data == 'create_op')
async def addop(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª —Å–æ–∑–¥–∞–Ω–∏—è –û–ü')
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–Ω–æ–ø–∫–∏')
    await state.set_state(OP_State.name)

@admin_router.message(AdminProtect(), OP_State.name)
async def opname(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @skazgoro')
    await state.set_state(OP_State.username)

@admin_router.message(AdminProtect(), OP_State.username)
async def setopusername(message: Message, state: FSMContext):
    await state.update_data(username=message.text)
    await message.answer('–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ https://t.me/+PjDRRsNifus4ZmQy')
    await state.set_state(OP_State.link)

@admin_router.message(AdminProtect(), OP_State.link)
async def oplink(message: Message, state: FSMContext):
    await state.update_data(link=message.text)
    data = await state.get_data()
    name = data["name"]
    link = data["link"]
    await message.answer('–ì–æ—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞',reply_markup=op_builder(name, link))
    await message.answer('–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=op_create_kb)

@admin_router.callback_query(AdminProtect(), F.data=='createopbtn')
async def opcreate(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data["name"]
    username = data["username"]
    link = data["link"]
    tg_id = callback.from_user.id
    await create_op(tg_id, name, username, link)
    await state.clear()
    await callback.answer('–£—Å–ø–µ—à–Ω–æ')
    await callback.message.answer('–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ–µ –≤ –º–µ–Ω—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n'
                                  '–ê —Ç–∞–∫ –∂–µ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞')

@admin_router.callback_query(AdminProtect(), F.data == 'cancelopbtn')
async def opcancel(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–û—Ç–º–µ–Ω–∞')
    await callback.message.answer('–û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è OP –æ—Ç–º–µ–Ω–µ–Ω–∞')
    await state.clear()

## ---- –í—Å–µ –º–µ–Ω—è–µ–º –ø–æ–¥ —Å–ø–∏—Å–æ–∫ OP

@admin_router.callback_query(AdminProtect(), F.data.startswith('op_'))
async def inline_refcode(callback: CallbackQuery):
    op = callback.data.split('_')[1]
    try:
        answer = await get_op_info(op)
        await callback.message.answer(answer, reply_markup=await op_switch_kb(op), parse_mode=ParseMode.MARKDOWN_V2) # , parse_mode=ParseMode.MARKDOWN_V2
        await callback.answer(f'–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Å—ã–ª–∫–µ: {op}')
    except:
        await callback.answer('–ù–µ—É–¥–∞—á–Ω–æ')
        await callback.message.answer('–û—à–∏–±–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç..', reply_markup=adminpanel)

@admin_router.callback_query(AdminProtect(), F.data.startswith('switch_'))
async def switch_func(callback: CallbackQuery):
    name = callback.data.split('_')[1]
    try:
        await switch_status_op(name)
        await callback.answer('–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å!')
        answer = await get_op_info(name)
        await callback.message.edit_text(answer, reply_markup=await op_switch_kb(name),
                                      parse_mode=ParseMode.MARKDOWN_V2)  # , parse_mode=ParseMode.MARKDOWN_V2
    except:
        await callback.answer('–ù–µ—É–¥–∞—á–Ω–æ')
        await callback.message.answer('–û—à–∏–±–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç..', reply_markup=adminpanel)

@admin_router.callback_query(AdminProtect(), F.data.startswith('delete_'))
async def delete_op(callback: CallbackQuery):
    name = callback.data.split('_')[1]
    await delete_op_req(name)
    await callback.message.edit_text('–£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=adminpanel)

@admin_router.callback_query(AdminProtect(), F.data.startswith('oplist'))
async def get_ref_codes(callback: CallbackQuery):
    page = 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await send_op_list(callback, page)

@admin_router.callback_query(AdminProtect(), F.data.startswith('back_oplist_'))
async def go_back(callback: CallbackQuery):
    current_page = int(callback.data.split('_')[-1])
    if current_page > 1:
        await send_op_list(callback, current_page - 1)
    else:
        await callback.answer('–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', show_alert=True)

@admin_router.callback_query(AdminProtect(), F.data.startswith('forward_oplist_'))
async def go_forward(callback: CallbackQuery):
    current_page = int(callback.data.split('_')[-1])
    await send_op_list(callback, current_page + 1)

async def send_op_list(callback: CallbackQuery, page: int):
    op_lst = await get_op_lst(page)
    if op_lst:
        await callback.message.edit_text(
            '–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø–æ –¥–∞—Ç–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é',
            reply_markup=op_keys_builder(op_lst, page)
        )
    else:
        await callback.answer('–ë–æ–ª—å—à–µ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤', show_alert=True)

@admin_router.message(F.text == '–ü—Ä–æ–≤–µ—Ä–∫–∞')
async def check_admin(message: Message, bot: Bot):
    need_to_sub = await check_user_subs_util(message.from_user.id, bot)
    if need_to_sub:
        await message.answer('–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞, –∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ–π—Ç–∏ —Å—é–¥–∞ –µ—â–µ —Ä–∞–∑',
                             reply_markup= await have_to_sub(message.from_user.id, bot))
    if not need_to_sub:
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø!')
@admin_router.callback_query(AdminProtect(), F.data == 'admin_settings')
async def settingsmenu(callback: CallbackQuery):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª\n\n', reply_markup=await settingbuilder())

@admin_router.callback_query(AdminProtect(), F.data== 'check_channels_admin')
async def check_channels_admin(callback: CallbackQuery, bot: Bot):
    await callback.answer('–ù–∞—á–∞–ª–∞—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤')
    answer = await check_admin_channels(bot)
    print(f'answer: {answer}')
    if answer:
        await callback.message.answer(answer)
    if not answer:
        await callback.message.answer('–í–æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')

@admin_router.callback_query(AdminProtect(), F.data == 'switchref')
async def switch_settings_ref_def(callback: CallbackQuery):
    await switch_settings_ref()
    await callback.answer('–£—Å–ø–µ—à–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ!')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª\n\n', reply_markup=await settingbuilder())

@admin_router.callback_query(AdminProtect(), F.data == 'switchop')
async def switch_settings_op_def(callback: CallbackQuery):
    await switch_settings_op()
    await callback.answer('–£—Å–ø–µ—à–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ!')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª\n\n', reply_markup=await settingbuilder())


@admin_router.message(AdminProtect(), F.text == '–¢–µ—Å—Ç')
async def admin_check(message: Message):
    op_status = await get_user_opstatus(message.from_user.id)
    await message.answer(f'op_status: {op_status}')
    ops_list = await get_ops_list('UGAR')
    await message.answer(f'ops_list: {ops_list}')
    ops_list = await add_user_op_toref(message.from_user.id, 'UGAR')
    await message.answer(f'ops_list: {ops_list}')