from aiogram import Router, F, Bot
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State

from app.builder import ref_code_key
from app.db.requests import get_all_users, get_today_users, get_all_users_lst, get_month_users, get_event_count, \
    get_ref_market, create_ref_code
from app.filters.main_filter import AdminProtect
from app.keyboards import adminpanel, apanelback, apanelsendall, marketpanel
from app.states import SendAllPic, SendAllText, Marketing, New_Ref
from app.utils.utils import get_ref_info

admin_router = Router()


@admin_router.message(AdminProtect(), Command('apanel'))
async def apanel(message: Message, command: Command):
    await message.answer('–í—ã –∑–∞—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=adminpanel)


@admin_router.message(AdminProtect(), Command('stat'))
async def stat(message: Message, command: Command):
    await message.answer('–í—ã –∑–∞—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')


@admin_router.message(AdminProtect(), Command('sendall'))
async def sendall(message: Message, command: Command):
    await message.answer('–í—ã –∑–∞—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')


@admin_router.callback_query(AdminProtect(), F.data == 'marketing')
async def marketing(callback: CallbackQuery):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª –º–∞—Ä–∫–µ—Ç–∏–Ω–≥')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup = marketpanel)

@admin_router.callback_query(AdminProtect(), F.data == 'create_ref_code')
async def create_refcode(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏')
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –ø—Ä–∏–º–µ—Ä "AGARIO"')
    await state.set_state(New_Ref.ref_name)
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –±–¥ + —Ä–∞–∑–±–∏–≤–∞—Ç—å –ø–æ 10 –∫–æ–¥–æ–≤, —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∫ –≤ backet

@admin_router.message(AdminProtect(), New_Ref.ref_name)
async def marketing_getinfo(message: Message, state: FSMContext):
    await state.update_data(ref_name=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å:')
    await state.set_state(New_Ref.price)


@admin_router.message(AdminProtect(), New_Ref.price)
async def setrefprice(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    ref_code = await state.get_data()
    ref_name = ref_code["ref_name"]
    ref_price = ref_code["price"]
    if await create_ref_code(message.from_user.id, ref_name, ref_price)!=0:
        await message.answer(f'–°—Å—ã–ª–∫–∞ {ref_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!', reply_markup=ref_code_key(ref_name))
    else:
        await message.answer(f'–°—Å—ã–ª–∫–∞ {ref_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')

@admin_router.callback_query(AdminProtect(), F.data.startswith('refcode_'))
async def inline_refcode(callback: CallbackQuery):
    ref_code = callback.data.split('_')[1]
    answer = await get_ref_info(ref_code)
    await callback.message.answer(answer)
    await callback.answer(f'–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Å—ã–ª–∫–µ: {ref_code}')


@admin_router.callback_query(AdminProtect(), F.data == 'ref_code_lst')
async def get_ref_codes(callback: CallbackQuery):
    await callback.answer('–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤')
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –±–¥ + —Ä–∞–∑–±–∏–≤–∞—Ç—å –ø–æ 10 –∫–æ–¥–æ–≤, —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∫ –≤ backet

@admin_router.callback_query(AdminProtect(), F.data == 'manual_ref_search')
async def manual_search(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥')
    await state.set_state(Marketing.ref_name)

@admin_router.message(AdminProtect(), Marketing.ref_name)
async def marketing_getinfo(message: Message, state: FSMContext):
    await state.update_data(ref_name=message.text)
    ref_code = await state.get_data()
    answer = await get_ref_info(ref_code["ref_name"])
    await message.answer(answer)


@admin_router.callback_query(AdminProtect(), F.data == 'stat')
async def get_stat(callback: CallbackQuery):
    await callback.answer('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    month_users = await get_month_users()
    print(month_users)
    all_users = await get_all_users()
    today_users = await get_today_users()
    today_horoscope = await get_event_count('–ì–æ—Ä–æ—Å–∫–æ–ø')
    today_comp = await get_event_count('–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å')
    await callback.message.edit_text(
        f'*\=\=\=\=\=\=\= –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ \=\=\=\=\=\=\=*\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {all_users}\n'
        f'üÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {today_users}\n'
        f'üóì –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {month_users}\n'
        f'‚ù§Ô∏è –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {today_comp}\n'
        f'üîÆ –ó–∞–ø—Ä–æ—Å–æ–≤ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {today_horoscope}', parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=apanelback)


@admin_router.callback_query(AdminProtect(), F.data == 'sendall')
async def send_all(callback: CallbackQuery):
    await callback.answer('–†–∞—Å—Å—ã–ª–∫–∞')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=apanelsendall)
    all_users = await get_all_users_lst()
    print(all_users)


@admin_router.callback_query(AdminProtect(), F.data == 'sendallpic')
async def send_all(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–†–∞—Å—Å—ã–ª–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π')
    await state.set_state(SendAllPic.img)
    await callback.message.edit_text('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É')


@admin_router.callback_query(AdminProtect(), F.data == 'sendalltxt')
async def send_all(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–æ–º')
    await state.set_state(SendAllText.text)
    await callback.message.edit_text('–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')


@admin_router.message(AdminProtect(), SendAllText.text)
async def sendtxt(message: Message, state: FSMContext, bot: Bot):
    all_users = await get_all_users_lst()
    await state.update_data(text=message.text)
    data = await state.get_data()
    count = 0
    for user in all_users:
        try:
            await bot.send_message(user, text=data['text'])
            count += 1
        except:
            print('error')
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ö–≤–∞—Ç–∏–ª–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    await state.clear()


@admin_router.message(AdminProtect(), SendAllPic.img)
async def addimgtosend(message: Message, state: FSMContext):
    await state.update_data(img=message.photo[-1].file_id)
    await state.set_state(SendAllPic.text)
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')  # –ù—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è –≤–∏–¥–µ–ª –ø—Ä–∏–º–µ—Ä


@admin_router.message(AdminProtect(), SendAllPic.text)
async def sendall(message: Message, state: FSMContext, bot: Bot):
    all_users = await get_all_users_lst()
    await state.update_data(text=message.text)
    data = await state.get_data()
    count = 0
    for user in all_users:
        try:
            await bot.send_photo(user, photo=data['img'], caption=data['text'])
            count += 1
        except:
            print('error')
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ö–≤–∞—Ç–∏–ª–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    await state.clear()


@admin_router.callback_query(AdminProtect(), F.data == 'back')
async def back_to_panel(callback: CallbackQuery):
    await callback.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å')
    await callback.message.edit_text('–í—ã –∑–∞—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=adminpanel)
