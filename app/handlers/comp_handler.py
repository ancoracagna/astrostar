from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, CallbackQuery

from app.db.requests import reg_event, add_check
from app.keyboards import comp_panel, result, zodiakkb
from app.states import Compatibility
from app.utils.utils import gen_unique, gen_res

router = Router()
@router.message(F.text == 'üë©‚Äç‚ù§Ô∏è‚Äçüë® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å')
async def compatibility(message: Message, state: FSMContext):
    await state.set_state(Compatibility.firstinfo)
    await message.answer('_–ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞_\n_–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ –ª—é–¥–µ–π –º–æ–≥—É—Ç –¥–∞–≤–∞—Ç—å –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç_', parse_mode=ParseMode.MARKDOWN_V2)
    await message.answer_photo(photo=FSInputFile('example.png'), caption=
                               '*–®–∞–≥ 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–Ω–µ*\n'
                               '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n'
                               '–ò–º—è: ‚úèÔ∏è\n'
                               '–í–æ–∑—Ä–∞—Å—Ç: üìÖ\n'
                               '–ü—Ä–∏–º–µ—Ä: `–ê–ª–µ–∫—Å–∞–Ω–¥—Ä 16`', parse_mode=ParseMode.MARKDOWN_V2)

@router.message(Compatibility.firstinfo)
async def compatibility_2(message: Message, state: FSMContext):
    await state.update_data(firstinfo=message.text)
    await state.set_state(Compatibility.firstzodiak)
    await message.answer('*–®–∞–≥ 2: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ø–∞—Ä–Ω—è* üì∏', parse_mode=ParseMode.MARKDOWN_V2, reply_markup=zodiakkb)

@router.callback_query(F.data.startswith('zodiak_'), Compatibility.firstzodiak)
async def select_first_zodiak(callback: CallbackQuery, state: FSMContext):
    await state.update_data(firstzodiak=callback.data)
    await state.set_state(Compatibility.secondinfo)
    await callback.message.answer('*–®–∞–≥ 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–≤—É—à–∫–µ*\n'
                                  '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n'
                                  '–ò–º—è: ‚úèÔ∏è\n'
                                  '–í–æ–∑—Ä–∞—Å—Ç: üìÖ\n'
                                  '–ü—Ä–∏–º–µ—Ä: `–ê–ª–∏–Ω–∞ 15`', parse_mode=ParseMode.MARKDOWN_V2)
    await callback.answer()

@router.message(Compatibility.secondinfo)
async def compatibility_4(message: Message, state: FSMContext):
    await state.update_data(secondinfo=message.text)
    await state.set_state(Compatibility.secondzodiak)
    await message.answer('*–®–∞–≥ 4: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–µ–≤—É—à–∫–∏* üì∏', parse_mode=ParseMode.MARKDOWN_V2, reply_markup=zodiakkb)

@router.callback_query(F.data.startswith('zodiak_'), Compatibility.secondzodiak)
async def select_second_zodiak(callback: CallbackQuery, state: FSMContext):
    await state.update_data(secondzodiak=callback.data)
    data = await state.get_data()
    desc = str(data["firstinfo"]) + "_" + str(data["secondinfo"])
    unique = gen_unique()
    await callback.message.answer_photo(photo=FSInputFile('result.png'),
                               caption=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {data["firstinfo"]} –∏ '
                                       f'{data["secondinfo"]}', reply_markup=await result(callback.from_user.id, unique))
    res = gen_res()
    await add_check(callback.from_user.id, desc, res, unique)

    await state.clear()
